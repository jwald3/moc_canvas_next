generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// New models based on hand_spun_datatypes
model HandSpunProject {
  id          String   @id @default(cuid())
  title       String
  description String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   
  owner       String?
  avatar      String?

  // Relations
  theme       HandSpunTheme        @relation(fields: [themeId], references: [id])
  themeId     String
  steps       HandSpunBuildStep[]
  stats       HandSpunProjectStats?
  mainImage   HandSpunProjectImage? @relation(name: "ProjectMainImage", fields: [mainImageId], references: [id])
  mainImageId String? @unique
}

model HandSpunTheme {
  id          String   @id @default(cuid())
  name        String
  description String
  iconType    String?
  color       String?

  // Relations
  projects    HandSpunProject[]
}

model HandSpunBuildStep {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int
  
  // Relations
  project     HandSpunProject      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  images      HandSpunProjectImage[]
}

model HandSpunProjectImage {
  id          String   @id @default(cuid())
  order       Int
  caption     String
  url         String
  type        String?  // Will be "reference" or "progress"
  
  // Relations
  buildStep   HandSpunBuildStep? @relation(fields: [buildStepId], references: [id], onDelete: Cascade)
  buildStepId String?  // Make this optional
  mainForProject HandSpunProject? @relation(name: "ProjectMainImage")
}

model HandSpunProjectStats {
  id          String  @id @default(cuid())
  views       Int     @default(0)
  likes       Int     @default(0)
  comments    Int     @default(0)
  shares      Int     @default(0)
  public      Boolean @default(true)
  
  // Relations
  project     HandSpunProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String         @unique
} 